
import React from 'react';

const Appendix = () => {
  return (
    <div className="chapter-content">
      <h2>付録</h2>
      <h3>よくあるエラーと解決法</h3>
      <p>GASでの開発中に遭遇しやすいエラーとその解決策をまとめました。</p>
      <ul>
        <li><strong>「スクリプトの実行が完了しませんでした。」</strong>: コードに文法エラーがあるか、無限ループに陥っている可能性があります。スクリプトエディタのログを確認し、エラーメッセージを参考に修正してください。</li>
        <li><strong>「承認が必要です。」</strong>: スプレッドシートへのアクセスなど、GASがGoogleサービスにアクセスするために必要な権限が許可されていません。初回実行時に表示される承認画面で許可してください。</li>
        <li><strong>「指定されたシートが見つかりません。」</strong>: `getSheetByName()` で指定したシート名が間違っている可能性があります。スプレッドシートのシート名とコードの記述が一致しているか確認してください。</li>
        <li><strong>「サービス SpreadsheetApp が見つかりません。」</strong>: GASプロジェクトがスプレッドシートにバインドされていないか、`SpreadsheetApp` サービスが有効になっていない可能性があります。</li>
      </ul>

      <h3>AIに質問するコツ</h3>
      <p>Geminiのような生成AIは、GASのコード作成やデバッグに非常に役立ちます。効果的に質問するためのコツを紹介します。</p>
      <ul>
        <li><strong>具体的な質問をする:</strong> 「GASでWebアプリを作りたい」だけでなく、「GASでスプレッドシートのデータを表示するWebアプリを作りたい」のように具体的に質問しましょう。</li>
        <li><strong>エラーメッセージをそのまま貼り付ける:</strong> エラーが発生した場合は、エラーメッセージを正確にAIに伝えると、的確なアドバイスが得られます。</li>
        <li><strong>目的と現状を明確にする:</strong> 「何をしたいのか」「どこまでできているのか」「何がうまくいかないのか」を明確に伝えましょう。</li>
        <li><strong>サンプルコードを提供する:</strong> 既存のコードがある場合は、それをAIに提供することで、より適切な修正案や改善案を提案してもらえます。</li>
      </ul>

      <h3>セキュリティの注意事項</h3>
      <p>Webアプリを公開する際には、セキュリティに十分注意してください。</p>
      <ul>
        <li><strong>機密情報の扱いに注意:</strong> パスワードや個人情報などの機密情報をコードに直接記述しないでください。</li>
        <li><strong>入力値の検証:</strong> ユーザーからの入力値は、必ず検証（バリデーション）を行ってください。悪意のある入力によって、予期せぬ動作やセキュリティ上の問題が発生する可能性があります。</li>
        <li><strong>アクセス権限の最小化:</strong> Webアプリのアクセス権限は、必要最小限に設定してください。</li>
      </ul>
    </div>
  );
};

export default Appendix;
